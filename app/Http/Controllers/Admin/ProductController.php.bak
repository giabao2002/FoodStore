<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\Admin\ProductRequest;
use App\Models\Category;
use App\Models\Product;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class ProductController extends Controller
{
    /**
     * Hiển thị danh sách sản phẩm
     */
    public function index(Request $request)
    {
        $query = Product::withoutGlobalScope('active')->with('category');

        // Tìm kiếm theo từ khóa
        if ($request->has('search') && !empty($request->search)) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                  ->orWhere('description', 'like', "%{$search}%");
            });
        }

        // Lọc theo danh mục
        if ($request->has('category') && !empty($request->category)) {
            $query->where('category_id', $request->category);
        }

        // Sắp xếp
        $sort = $request->input('sort', 'newest');
        switch ($sort) {
            case 'oldest':
                $query->oldest();
                break;
            case 'name_asc':
                $query->orderBy('name', 'asc');
                break;
            case 'name_desc':
                $query->orderBy('name', 'desc');
                break;
            case 'price_asc':
                $query->orderBy('price', 'asc');
                break;
            case 'price_desc':
                $query->orderBy('price', 'desc');
                break;
            default:
                $query->latest();
        }

        $products = $query->paginate(10)->withQueryString();
        $categories = Category::withoutGlobalScope('active')->get();

        return view('admin.products.index', compact('products', 'categories'));
    }

    /**
     * Hiển thị form tạo sản phẩm
     */
    public function create()
    {
        $categories = Category::all();
        return view('admin.products.create', compact('categories'));
    }

    /**
     * Lưu sản phẩm mới
     */
    public function store(ProductRequest $request)
    {
        $data = $request->validated();

        // Xử lý slug
        if (empty($data['slug'])) {
            $data['slug'] = Str::slug($data['name']);
        }

        // Xử lý các trường boolean
        $data['is_active'] = $request->has('is_active') ? true : false;

        // Xử lý hình ảnh đại diện
        if ($request->hasFile('image')) {
            // Đảm bảo thư mục products tồn tại
            if (!Storage::disk('public')->exists('products')) {
                Storage::disk('public')->makeDirectory('products');
            }

            $data['image'] = $request->file('image')->store('products', 'public');
        }

        // Lưu sản phẩm
        try {
            $product = Product::create($data);
            return redirect()->route('admin.products.index')
                ->with('success', 'Thêm sản phẩm thành công!');
        } catch (\Exception $e) {
            // Xóa ảnh đã tải lên nếu có lỗi
            if (isset($data['image']) && Storage::disk('public')->exists($data['image'])) {
                Storage::disk('public')->delete($data['image']);
            }

            return back()->withInput()
                ->with('error', 'Đã xảy ra lỗi khi thêm sản phẩm: ' . $e->getMessage());
        }
    }
        if ($request->hasFile('image_gallery')) {
            // Đảm bảo thư mục products/gallery tồn tại
            if (!Storage::disk('public')->exists('products/gallery')) {
                Storage::disk('public')->makeDirectory('products/gallery');
            }

            foreach ($request->file('image_gallery') as $image) {
                $path = $image->store('products/gallery', 'public');
                $gallery[] = asset('storage/' . $path);
            }
            $data['gallery'] = json_encode($gallery);
        }

        // Lưu sản phẩm
        try {
            $product = Product::create($data);
            return redirect()->route('admin.products.index')
                ->with('success', 'Thêm sản phẩm thành công!');
        } catch (\Exception $e) {
            // Xóa ảnh đã tải lên nếu có lỗi
            if (isset($data['image']) && Storage::disk('public')->exists($data['image'])) {
                Storage::disk('public')->delete($data['image']);
            }

            // Xóa ảnh gallery đã tải lên nếu có lỗi
            if (isset($gallery) && !empty($gallery)) {
                foreach ($gallery as $imagePath) {
                    // Extract the path from the asset URL
                    $path = str_replace(asset('storage/'), '', $imagePath);
                    if (Storage::disk('public')->exists($path)) {
                        Storage::disk('public')->delete($path);
                    }
                }
            }

            return back()->withInput()
                ->with('error', 'Đã xảy ra lỗi khi thêm sản phẩm: ' . $e->getMessage());
        }
    }

    /**
     * Hiển thị chi tiết sản phẩm
     */
    public function show(Product $product)
    {
        // Remove global scope to show even inactive products
        $product = Product::withoutGlobalScope('active')
            ->with(['category', 'reviews.user'])
            ->findOrFail($product->id);

        return view('admin.products.show', compact('product'));
    }

    /**
     * Hiển thị form chỉnh sửa sản phẩm
     */
    public function edit(Product $product)
    {
        $categories = Category::withoutGlobalScope('active')->get();
        // Remove global scope to edit even inactive products
        $product = Product::withoutGlobalScope('active')->findOrFail($product->id);
        return view('admin.products.edit', compact('product', 'categories'));
    }

    /**
     * Cập nhật sản phẩm
     */
    public function update(ProductRequest $request, Product $product)
    {
        // Remove global scope to update even inactive products
        $product = Product::withoutGlobalScope('active')->findOrFail($product->id);

        $data = $request->validated();

        // Xử lý slug
        if (empty($data['slug'])) {
            $data['slug'] = Str::slug($data['name']);
        }

        // Xử lý các trường boolean
        $data['is_featured'] = $request->has('is_featured') ? true : false;
        $data['is_active'] = $request->has('is_active') ? true : false;

        // Xử lý hình ảnh đại diện
        if ($request->hasFile('image')) {
            // Xóa ảnh cũ nếu có
            if ($product->image && Storage::disk('public')->exists($product->image)) {
                Storage::disk('public')->delete($product->image);
            }

            // Đảm bảo thư mục products tồn tại
            if (!Storage::disk('public')->exists('products')) {
                Storage::disk('public')->makeDirectory('products');
            }

            $data['image'] = $request->file('image')->store('products', 'public');
        }

        // Xử lý ảnh gallery
        if ($request->hasFile('image_gallery')) {
            // Convert existing gallery from JSON to array if it exists
            $gallery = is_string($product->gallery) ? json_decode($product->gallery, true) : ($product->gallery ?? []);

            // Đảm bảo thư mục products/gallery tồn tại
            if (!Storage::disk('public')->exists('products/gallery')) {
                Storage::disk('public')->makeDirectory('products/gallery');
            }

            foreach ($request->file('image_gallery') as $image) {
                $path = $image->store('products/gallery', 'public');
                $gallery[] = asset('storage/' . $path);
            }
            $data['gallery'] = json_encode($gallery);
        }

        // Cập nhật sản phẩm
        try {
            $product->update($data);
            return redirect()->route('admin.products.index')
                ->with('success', 'Cập nhật sản phẩm thành công!');
        } catch (\Exception $e) {
            // Nếu có lỗi và đã tải lên ảnh mới, xóa ảnh đó
            if (isset($data['image']) && Storage::disk('public')->exists($data['image'])) {
                Storage::disk('public')->delete($data['image']);
            }

            return back()->withInput()
                ->with('error', 'Đã xảy ra lỗi khi cập nhật sản phẩm: ' . $e->getMessage());
        }
    }

    /**
     * Xóa ảnh trong gallery của sản phẩm
     */
    public function deleteGalleryImage(Request $request)
    {
        $request->validate([
            'product_id' => 'required|exists:products,id',
            'image_url' => 'required|string',
        ]);

        $product = Product::withoutGlobalScope('active')->findOrFail($request->product_id);

        // Get gallery from product, decode if needed
        $gallery = is_string($product->gallery) ? json_decode($product->gallery, true) : ($product->gallery ?? []);

        // Lọc ra các ảnh không trùng với ảnh cần xóa
        $updatedGallery = array_filter($gallery, function($image) use ($request) {
            return $image != $request->image_url;
        });

        // Cập nhật lại gallery
        $product->gallery = json_encode(array_values($updatedGallery)); // Đảm bảo mảng được đánh lại chỉ số
        $product->save();

        // Xóa file ảnh khỏi storage nếu cần
        $imagePath = str_replace(asset('storage/'), '', $request->image_url);
        if (Storage::disk('public')->exists($imagePath)) {
            Storage::disk('public')->delete($imagePath);
        }

        return response()->json([
            'success' => true,
            'message' => 'Đã xóa ảnh thành công',
            'gallery' => json_decode($product->gallery, true)
        ]);
    }

    /**
     * Xóa sản phẩm
     */
    public function destroy(Product $product)
    {
        // Xóa hình ảnh nếu có
        if ($product->image) {
            Storage::disk('public')->delete($product->image);
        }

        $product->delete();

        return redirect()->route('admin.products.index')->with('success', 'Xóa sản phẩm thành công!');
    }

    /**
     * Xử lý hành động hàng loạt cho sản phẩm
     */
    public function bulkAction(Request $request)
    {
        $request->validate([
            'action' => 'required|in:delete,activate,deactivate',
            'product_ids' => 'required|array',
            'product_ids.*' => 'exists:products,id',
        ]);

        $action = $request->input('action');
        $selectedIds = $request->input('product_ids');

        switch ($action) {
            case 'delete':
                // Lấy danh sách sản phẩm để xóa ảnh
                $products = Product::withoutGlobalScope('active')
                    ->whereIn('id', $selectedIds)
                    ->get();

                // Xóa ảnh trước khi xóa sản phẩm
                foreach ($products as $product) {
                    if ($product->image) {
                        Storage::disk('public')->delete($product->image);
                    }
                }

                // Xóa sản phẩm
                Product::withoutGlobalScope('active')
                    ->whereIn('id', $selectedIds)
                    ->delete();
                $message = 'Đã xóa ' . count($selectedIds) . ' sản phẩm thành công';
                break;

            case 'activate':
                Product::withoutGlobalScope('active')
                    ->whereIn('id', $selectedIds)
                    ->update(['is_active' => true]);
                $message = 'Đã kích hoạt ' . count($selectedIds) . ' sản phẩm';
                break;

            case 'deactivate':
                Product::withoutGlobalScope('active')
                    ->whereIn('id', $selectedIds)
                    ->update(['is_active' => false]);
                $message = 'Đã ẩn ' . count($selectedIds) . ' sản phẩm';
                break;

            default:
                return back()->with('error', 'Hành động không hợp lệ');
        }

        return back()->with('success', $message);
    }
}
